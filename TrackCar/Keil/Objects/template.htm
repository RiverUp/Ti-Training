<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\template.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\template.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Sat May 20 19:04:27 2023
<BR><P>
<H3>Maximum Stack Usage =        300 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; rtthread_startup &rArr; rt_application_init &rArr; rt_thread_create &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[22]">ADC14_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">ADC14_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[22]">ADC14_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[26]">AES256_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[10]">COMP_E0_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[11]">COMP_E1_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[b]">CS_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[28]">DMA_ERR_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[2c]">DMA_INT0_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[2b]">DMA_INT1_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[2a]">DMA_INT2_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[29]">DMA_INT3_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[1a]">EUSCIA0_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[1b]">EUSCIA1_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[1c]">EUSCIA2_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[1d]">EUSCIA3_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[1e]">EUSCIB0_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[1f]">EUSCIB1_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[20]">EUSCIB2_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[21]">EUSCIB3_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[f]">FLCTL_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[e]">FPU_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from context_rvds.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[c]">PCM_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[2d]">PORT1_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[2e]">PORT2_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[2f]">PORT3_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[30]">PORT4_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[31]">PORT5_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[32]">PORT6_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[a]">PSS_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from context_rvds.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[27]">RTC_C_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from board.o(i.SysTick_Handler) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[34]">SystemInit</a> from system_msp432p401r.o(i.SystemInit) referenced from startup_msp432p401r_uvision.o(.text)
 <LI><a href="#[23]">T32_INT1_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[24]">T32_INT2_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[25]">T32_INTC_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[12]">TA0_0_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[13]">TA0_N_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[14]">TA1_0_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[15]">TA1_N_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[16]">TA2_0_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[17]">TA2_N_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[18]">TA3_0_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[19]">TA3_N_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[d]">WDT_A_IRQHandler</a> from startup_msp432p401r_uvision.o(.text) referenced from startup_msp432p401r_uvision.o(RESET)
 <LI><a href="#[35]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_msp432p401r_uvision.o(.text)
 <LI><a href="#[36]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[33]">main</a> from components.o(i.$Sub$$main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[3b]">main_thread_entry</a> from components.o(i.main_thread_entry) referenced from components.o(i.rt_application_init)
 <LI><a href="#[37]">rt_thread_exit</a> from thread.o(i.rt_thread_exit) referenced from thread.o(i._rt_thread_init)
 <LI><a href="#[3c]">rt_thread_idle_entry</a> from idle.o(i.rt_thread_idle_entry) referenced from idle.o(i.rt_thread_idle_init)
 <LI><a href="#[38]">rt_thread_timeout</a> from thread.o(i.rt_thread_timeout) referenced from thread.o(i._rt_thread_init)
 <LI><a href="#[40]">rti_board_end</a> from components.o(i.rti_board_end) referenced from components.o(.rti_fn.1.end)
 <LI><a href="#[3f]">rti_board_start</a> from components.o(i.rti_board_start) referenced from components.o(.rti_fn.0.end)
 <LI><a href="#[41]">rti_end</a> from components.o(i.rti_end) referenced from components.o(.rti_fn.6.end)
 <LI><a href="#[3e]">rti_start</a> from components.o(i.rti_start) referenced from components.o(.rti_fn.0)
 <LI><a href="#[3d]">sampleVoltage</a> from tcrt_entry.o(i.sampleVoltage) referenced from tcrt_entry.o(i.tcrt_entry)
 <LI><a href="#[3a]">serial_entry</a> from serial_entry.o(i.serial_entry) referenced from main.o(i.main)
 <LI><a href="#[39]">tcrt_entry</a> from tcrt_entry.o(i.tcrt_entry) referenced from main.o(i.main)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[35]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(.text)
</UL>
<P><STRONG><a name="[ce]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[42]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[53]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[cf]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[d0]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[d1]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[d2]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[d3]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>ADC14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC14_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC14_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>AES256_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>COMP_E0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>COMP_E1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>CS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA_INT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA_INT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA_INT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA_INT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EUSCIA0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EUSCIA1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EUSCIA2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EUSCIA3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EUSCIB0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EUSCIB1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EUSCIB2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EUSCIB3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>FLCTL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PCM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>PORT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>PORT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>PORT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>PORT4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>PORT5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>PORT6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>PSS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>RTC_C_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>T32_INT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>T32_INT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>T32_INTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TA0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TA0_N_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TA1_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TA1_N_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TA2_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TA2_N_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TA3_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TA3_N_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>WDT_A_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_msp432p401r_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>rt_hw_interrupt_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_cleanup_execute
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
</UL>

<P><STRONG><a name="[75]"></a>rt_hw_interrupt_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_cleanup_execute
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
</UL>

<P><STRONG><a name="[a7]"></a>rt_hw_context_switch</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[a8]"></a>rt_hw_context_switch_interrupt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[b4]"></a>rt_hw_context_switch_to</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[d4]"></a>rt_hw_interrupt_thread_switch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, context_rvds.o(.text), UNUSED)

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = HardFault_Handler &rArr; rt_hw_hard_fault_exception &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcrt_entry
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ca]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcrt_entry
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_entry
</UL>

<P><STRONG><a name="[47]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcrt_entry
</UL>

<P><STRONG><a name="[d5]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[49]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[d6]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[48]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[d7]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[4c]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[46]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[4d]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[4f]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[50]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[51]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[52]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[67]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[43]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[d8]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[4b]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[d9]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[4a]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[da]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[db]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[33]"></a>main</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, components.o(i.$Sub$$main))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = main &rArr; rtthread_startup &rArr; rt_application_init &rArr; rt_thread_create &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[55]"></a>ADC14_configureConversionMemory</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, adc14.o(i.ADC14_configureConversionMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ADC14_configureConversionMemory
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_getIndexForMemRegister
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCIsConversionRunning
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TCRT
</UL>

<P><STRONG><a name="[58]"></a>ADC14_configureSingleSampleMode</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, adc14.o(i.ADC14_configureSingleSampleMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC14_configureSingleSampleMode
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_getIndexForMemRegister
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCIsConversionRunning
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TCRT
</UL>

<P><STRONG><a name="[59]"></a>ADC14_enableConversion</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, adc14.o(i.ADC14_enableConversion))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC14_enableConversion
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCIsConversionRunning
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TCRT
</UL>

<P><STRONG><a name="[7a]"></a>ADC14_enableModule</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, adc14.o(i.ADC14_enableModule))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TCRT
</UL>

<P><STRONG><a name="[5a]"></a>ADC14_enableSampleTimer</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, adc14.o(i.ADC14_enableSampleTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC14_enableSampleTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCIsConversionRunning
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TCRT
</UL>

<P><STRONG><a name="[5b]"></a>ADC14_getResult</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, adc14.o(i.ADC14_getResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC14_getResult
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_getIndexForMemRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_TCRT
</UL>

<P><STRONG><a name="[5c]"></a>ADC14_initModule</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, adc14.o(i.ADC14_initModule))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC14_initModule
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCIsConversionRunning
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TCRT
</UL>

<P><STRONG><a name="[7c]"></a>ADC14_toggleConversionTrigger</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, adc14.o(i.ADC14_toggleConversionTrigger))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TCRT
</UL>

<P><STRONG><a name="[5f]"></a>CS_setDCOCenteredFrequency</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, cs.o(i.CS_setDCOCenteredFrequency))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_setDCOFrequency
</UL>

<P><STRONG><a name="[5d]"></a>CS_setDCOFrequency</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, cs.o(i.CS_setDCOFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CS_setDCOFrequency &rArr; SysCtl_getTLVInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtl_getTLVInfo
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_tuneDCOFrequency
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_setDCOCenteredFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSerial
</UL>

<P><STRONG><a name="[60]"></a>CS_tuneDCOFrequency</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, cs.o(i.CS_tuneDCOFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CS_tuneDCOFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_setDCOFrequency
</UL>

<P><STRONG><a name="[cc]"></a>GPIO_setAsOutputPin</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gpio.o(i.GPIO_setAsOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcrt_entry
</UL>

<P><STRONG><a name="[7b]"></a>GPIO_setAsPeripheralModuleFunctionInputPin</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, gpio.o(i.GPIO_setAsPeripheralModuleFunctionInputPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_setAsPeripheralModuleFunctionInputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TCRT
</UL>

<P><STRONG><a name="[c7]"></a>GPIO_toggleOutputOnPin</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(i.GPIO_toggleOutputOnPin))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sampleVoltage
</UL>

<P><STRONG><a name="[cd]"></a>Kalman_TCRT</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, filter.o(i.Kalman_TCRT))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcrt_entry
</UL>

<P><STRONG><a name="[5e]"></a>SysCtl_getTLVInfo</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, sysctl.o(i.SysCtl_getTLVInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysCtl_getTLVInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_setDCOFrequency
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, board.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SysTick_Handler &rArr; rt_tick_increase &rArr; rt_timer_check &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 576 bytes, Stack size 16 bytes, system_msp432p401r.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[34]"></a>SystemInit</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, system_msp432p401r.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_msp432p401r_uvision.o(.text)
</UL>
<P><STRONG><a name="[78]"></a>UART_enableModule</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart.o(i.UART_enableModule))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSerial
</UL>

<P><STRONG><a name="[77]"></a>UART_initModule</STRONG> (Thumb, 246 bytes, Stack size 12 bytes, uart.o(i.UART_initModule))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART_initModule
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSerial
</UL>

<P><STRONG><a name="[c9]"></a>UART_transmitData</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, uart.o(i.UART_transmitData))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendText
</UL>

<P><STRONG><a name="[7e]"></a>WDT_A_holdTimer</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wdt_a.o(i.WDT_A_holdTimer))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[64]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[dc]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[cb]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_entry
</UL>

<P><STRONG><a name="[dd]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[de]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[a6]"></a>__rt_ffs</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, kservice.o(i.__rt_ffs))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[df]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[e0]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[e1]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[76]"></a>initSerial</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, serial.o(i.initSerial))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = initSerial &rArr; CS_setDCOFrequency &rArr; SysCtl_getTLVInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_setDCOFrequency
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_initModule
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_enableModule
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_entry
</UL>

<P><STRONG><a name="[79]"></a>init_TCRT</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, tcrt5000.o(i.init_TCRT))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = init_TCRT &rArr; ADC14_configureConversionMemory
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC14_toggleConversionTrigger
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC14_initModule
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC14_enableSampleTimer
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC14_enableModule
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC14_enableConversion
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC14_configureSingleSampleMode
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC14_configureConversionMemory
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_setAsPeripheralModuleFunctionInputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcrt_entry
</UL>

<P><STRONG><a name="[7d]"></a>$Super$$main</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = $Super$$main &rArr; rt_thread_create &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_A_holdTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread_entry
</UL>

<P><STRONG><a name="[3b]"></a>main_thread_entry</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, components.o(i.main_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = main_thread_entry &rArr; $Super$$main &rArr; rt_thread_create &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_components_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> components.o(i.rt_application_init)
</UL>
<P><STRONG><a name="[82]"></a>read_TCRT</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, tcrt5000.o(i.read_TCRT))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = read_TCRT &rArr; ADC14_getResult
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC14_getResult
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sampleVoltage
</UL>

<P><STRONG><a name="[83]"></a>rt_application_init</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, components.o(i.rt_application_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = rt_application_init &rArr; rt_thread_create &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[8f]"></a>rt_components_board_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, components.o(i.rt_components_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_components_board_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[81]"></a>rt_components_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, components.o(i.rt_components_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_components_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread_entry
</UL>

<P><STRONG><a name="[84]"></a>rt_enter_critical</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, scheduler.o(i.rt_enter_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_enter_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>

<P><STRONG><a name="[85]"></a>rt_exit_critical</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, scheduler.o(i.rt_exit_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>

<P><STRONG><a name="[87]"></a>rt_free</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, mem.o(i.rt_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>

<P><STRONG><a name="[91]"></a>rt_heap_begin_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, board.o(i.rt_heap_begin_get))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[90]"></a>rt_heap_end_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, board.o(i.rt_heap_end_get))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[8c]"></a>rt_hw_board_init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, board.o(i.rt_hw_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = rt_hw_board_init &rArr; rt_system_heap_init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_heap_end_get
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_heap_begin_get
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_components_board_init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysTick_Config
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[9c]"></a>rt_hw_console_output</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, kservice.o(i.rt_hw_console_output))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[44]"></a>rt_hw_hard_fault_exception</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, cpuport.o(i.rt_hw_hard_fault_exception))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = rt_hw_hard_fault_exception &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[6d]"></a>rt_hw_stack_init</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, cpuport.o(i.rt_hw_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_hw_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[61]"></a>rt_interrupt_enter</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, irq.o(i.rt_interrupt_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_interrupt_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[63]"></a>rt_interrupt_leave</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, irq.o(i.rt_interrupt_leave))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[89]"></a>rt_kprintf</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, kservice.o(i.rt_kprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>

<P><STRONG><a name="[9d]"></a>rt_malloc</STRONG> (Thumb, 336 bytes, Stack size 24 bytes, mem.o(i.rt_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>

<P><STRONG><a name="[6c]"></a>rt_memset</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, kservice.o(i.rt_memset))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[9e]"></a>rt_object_allocate</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, object.o(i.rt_object_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_create
</UL>

<P><STRONG><a name="[a2]"></a>rt_object_delete</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, object.o(i.rt_object_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>

<P><STRONG><a name="[a4]"></a>rt_object_detach</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, object.o(i.rt_object_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_object_detach
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[9f]"></a>rt_object_get_information</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, object.o(i.rt_object_get_information))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>

<P><STRONG><a name="[a5]"></a>rt_object_init</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, object.o(i.rt_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
</UL>

<P><STRONG><a name="[b7]"></a>rt_object_is_systemobject</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, object.o(i.rt_object_is_systemobject))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[86]"></a>rt_schedule</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, scheduler.o(i.rt_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_interrupt
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[a9]"></a>rt_schedule_insert_thread</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, scheduler.o(i.rt_schedule_insert_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
</UL>

<P><STRONG><a name="[aa]"></a>rt_schedule_remove_thread</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, scheduler.o(i.rt_schedule_remove_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_schedule_remove_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[ab]"></a>rt_sem_create</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, ipc.o(i.rt_sem_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcrt_entry
</UL>

<P><STRONG><a name="[ac]"></a>rt_sem_init</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, ipc.o(i.rt_sem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rt_sem_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
</UL>

<P><STRONG><a name="[8b]"></a>rt_sem_release</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, ipc.o(i.rt_sem_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcrt_entry
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sampleVoltage
</UL>

<P><STRONG><a name="[88]"></a>rt_sem_take</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, ipc.o(i.rt_sem_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcrt_entry
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_entry
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>

<P><STRONG><a name="[b0]"></a>rt_show_version</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, kservice.o(i.rt_show_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = rt_show_version &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[a0]"></a>rt_strncpy</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, kservice.o(i.rt_strncpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>

<P><STRONG><a name="[92]"></a>rt_system_heap_init</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, mem.o(i.rt_system_heap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = rt_system_heap_init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[b1]"></a>rt_system_scheduler_init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, scheduler.o(i.rt_system_scheduler_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_system_scheduler_init &rArr; rt_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[b3]"></a>rt_system_scheduler_start</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, scheduler.o(i.rt_system_scheduler_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_system_scheduler_start
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_to
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[b5]"></a>rt_system_timer_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, timer.o(i.rt_system_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_system_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[c6]"></a>rt_system_timer_thread_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, timer.o(i.rt_system_timer_thread_init))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[7f]"></a>rt_thread_create</STRONG> (Thumb, 80 bytes, Stack size 56 bytes, thread.o(i.rt_thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = rt_thread_create &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
</UL>

<P><STRONG><a name="[37]"></a>rt_thread_exit</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, thread.o(i.rt_thread_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_thread_exit &rArr; rt_timer_detach &rArr; rt_object_detach
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_cleanup_execute
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(i._rt_thread_init)
</UL>
<P><STRONG><a name="[b9]"></a>rt_thread_idle_excute</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, idle.o(i.rt_thread_idle_excute))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = rt_thread_idle_excute &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_entry
</UL>

<P><STRONG><a name="[ba]"></a>rt_thread_idle_init</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, idle.o(i.rt_thread_idle_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = rt_thread_idle_init &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[bb]"></a>rt_thread_init</STRONG> (Thumb, 52 bytes, Stack size 56 bytes, thread.o(i.rt_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
</UL>

<P><STRONG><a name="[95]"></a>rt_thread_resume</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, thread.o(i.rt_thread_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
</UL>

<P><STRONG><a name="[93]"></a>rt_thread_self</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, thread.o(i.rt_thread_self))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>

<P><STRONG><a name="[80]"></a>rt_thread_startup</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, thread.o(i.rt_thread_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_thread_startup &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
</UL>

<P><STRONG><a name="[97]"></a>rt_thread_suspend</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, thread.o(i.rt_thread_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
</UL>

<P><STRONG><a name="[38]"></a>rt_thread_timeout</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, thread.o(i.rt_thread_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_thread_timeout &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(i._rt_thread_init)
</UL>
<P><STRONG><a name="[be]"></a>rt_thread_yield</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, thread.o(i.rt_thread_yield))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_thread_yield &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[c0]"></a>rt_tick_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, clock.o(i.rt_tick_get))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>

<P><STRONG><a name="[62]"></a>rt_tick_increase</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, clock.o(i.rt_tick_increase))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_tick_increase &rArr; rt_timer_check &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[bf]"></a>rt_timer_check</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, timer.o(i.rt_timer_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_timer_check &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[ae]"></a>rt_timer_control</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, timer.o(i.rt_timer_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_timer_control
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
</UL>

<P><STRONG><a name="[c3]"></a>rt_timer_create</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, timer.o(i.rt_timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = rt_timer_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcrt_entry
</UL>

<P><STRONG><a name="[b6]"></a>rt_timer_detach</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, timer.o(i.rt_timer_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_timer_detach &rArr; rt_object_detach
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[6e]"></a>rt_timer_init</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, timer.o(i.rt_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[af]"></a>rt_timer_start</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, timer.o(i.rt_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcrt_entry
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>

<P><STRONG><a name="[bd]"></a>rt_timer_stop</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, timer.o(i.rt_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>

<P><STRONG><a name="[9b]"></a>rt_vsnprintf</STRONG> (Thumb, 824 bytes, Stack size 88 bytes, kservice.o(i.rt_vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_atoi
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[54]"></a>rtthread_startup</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, components.o(i.rtthread_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = rtthread_startup &rArr; rt_application_init &rArr; rt_thread_create &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3d]"></a>sampleVoltage</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, tcrt_entry.o(i.sampleVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = sampleVoltage &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_toggleOutputOnPin
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_TCRT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcrt_entry.o(i.tcrt_entry)
</UL>
<P><STRONG><a name="[c8]"></a>sendText</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, serial.o(i.sendText))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sendText
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_transmitData
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_entry
</UL>

<P><STRONG><a name="[3a]"></a>serial_entry</STRONG> (Thumb, 76 bytes, Stack size 48 bytes, serial_entry.o(i.serial_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = serial_entry &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendText
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSerial
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[39]"></a>tcrt_entry</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, tcrt_entry.o(i.tcrt_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = tcrt_entry &rArr; rt_timer_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_setAsOutputPin
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_TCRT
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TCRT
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[56]"></a>ADCIsConversionRunning</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, adc14.o(i.ADCIsConversionRunning))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC14_initModule
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC14_enableSampleTimer
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC14_enableConversion
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC14_configureSingleSampleMode
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC14_configureConversionMemory
</UL>

<P><STRONG><a name="[57]"></a>_getIndexForMemRegister</STRONG> (Thumb, 348 bytes, Stack size 0 bytes, adc14.o(i._getIndexForMemRegister))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC14_getResult
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC14_configureSingleSampleMode
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC14_configureConversionMemory
</UL>

<P><STRONG><a name="[8e]"></a>_SysTick_Config</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, board.o(i._SysTick_Config))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[40]"></a>rti_board_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_board_end))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.1.end)
</UL>
<P><STRONG><a name="[3f]"></a>rti_board_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_board_start))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.0.end)
</UL>
<P><STRONG><a name="[41]"></a>rti_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_end))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.6.end)
</UL>
<P><STRONG><a name="[3e]"></a>rti_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_start))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.0)
</UL>
<P><STRONG><a name="[3c]"></a>rt_thread_idle_entry</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, idle.o(i.rt_thread_idle_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = rt_thread_idle_entry &rArr; rt_thread_idle_excute &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> idle.o(i.rt_thread_idle_init)
</UL>
<P><STRONG><a name="[94]"></a>rt_ipc_list_resume</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ipc.o(i.rt_ipc_list_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>

<P><STRONG><a name="[96]"></a>rt_ipc_list_suspend</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, ipc.o(i.rt_ipc_list_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
</UL>

<P><STRONG><a name="[99]"></a>rt_ipc_object_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ipc.o(i.rt_ipc_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_ipc_object_init
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
</UL>

<P><STRONG><a name="[9a]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ipc.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
</UL>

<P><STRONG><a name="[98]"></a>rt_list_insert_before</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ipc.o(i.rt_list_insert_before))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
</UL>

<P><STRONG><a name="[ad]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ipc.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>

<P><STRONG><a name="[c5]"></a>print_number</STRONG> (Thumb, 400 bytes, Stack size 60 bytes, kservice.o(i.print_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = print_number
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[c4]"></a>skip_atoi</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, kservice.o(i.skip_atoi))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[8a]"></a>plug_holes</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, mem.o(i.plug_holes))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>

<P><STRONG><a name="[a1]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, object.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>

<P><STRONG><a name="[a3]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, object.o(i.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
</UL>

<P><STRONG><a name="[b2]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scheduler.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
</UL>

<P><STRONG><a name="[6b]"></a>_rt_thread_init</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, thread.o(i._rt_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_stack_init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>

<P><STRONG><a name="[73]"></a>_thread_cleanup_execute</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, thread.o(i._thread_cleanup_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _thread_cleanup_execute
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[b8]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, thread.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[bc]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, thread.o(i.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
</UL>

<P><STRONG><a name="[6f]"></a>_rt_timer_init</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, timer.o(i._rt_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _rt_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_create
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
</UL>

<P><STRONG><a name="[71]"></a>_rt_timer_remove</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, timer.o(i._rt_timer_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
</UL>

<P><STRONG><a name="[70]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
</UL>

<P><STRONG><a name="[c1]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>

<P><STRONG><a name="[c2]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>

<P><STRONG><a name="[72]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer.o(i.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>

<P><STRONG><a name="[66]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[65]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>

<P><STRONG><a name="[69]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[68]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[36]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
